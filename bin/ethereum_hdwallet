#!/usr/bin/env node

const { table, getBorderCharacters } = require('table')
const meow = require('meow')
const HDWallet = require('../')

const cli = meow(`
    Usage
  $ ethereum_hdwallet [options]

    Options
      -i, --index Account Index (e.g. 4)
      -p, --properties Properties to display (e.g. address, publickey, privatekey, hdpath)
      -r, --range Account Index Range (e.g 1-100)
      -m, --mnemonic Mnemonic
      -h, --hdpath HD Path

    Examples
      $ ethereum_hdwallet -m "tag volcano eight thank tide danger coast health ab
ove argue embrace heavy" -r 0-10
  `, {
    string: [
      'property',
      'range',
      'mnemonic',
      'hdpath'
    ],
    number: [
      'index'
    ],
    alias: {
      i: 'index',
      p: 'property',
      r: 'range',
      m: 'mnemonic',
      h: 'hdpath'
    }
  }
)

const args = process.argv
const { flags, input } = cli
const mnemonic = flags.mnemonic || flags.m || input[0]

if (!mnemonic) {
  throw new Error('mnemonic is required')
}

const hdpath = flags.hdpath || flags.h
const hdwallet = new HDWallet(mnemonic, hdpath)

var start = 0
var end = 10

if (flags.index || flags.i) {
  start = flags.index || flags.i
  end = start + 1
} else if (flags.range || flags.r) {
  const range = (flags.range || flags.r).split('-')
  start = (range[0]|0)
  end = (range[1]|0)+1

  if (end < start) {
    end = start + 10
  }
  if (start > end) {
    start = 0
  }
}

var properties = (flags.properties || flags.p || 'address').split(',').map(x => x.trim().toLowerCase())

var headerKeys = {
  address: 'address',
  private: 'private key',
  public: 'public key',
  hdpath: 'hd path'
}
var props = []

for (var i = 0; i < properties.length; i++) {
  var property = properties[i]
  var prop = null
  if (/address|(public.*address)/.test(property)) {
    prop = 'address'
  } else if (/private/.test(property)) {
    prop = 'private'
  } else if (/public/.test(property)) {
    prop = 'public'
  } else if (/hdpath/.test(property)) {
    prop = 'hdpath'
  }

  if (prop && props.indexOf(prop) === -1) {
    props.push(prop)
  }
}

const headers = []

for (var i = 0; i < props.length; i++) {
  headers.push(headerKeys[props[i]])
}

const result = [['account', ...headers]]

for (var i = start; i < end; i++) {
  const wallet = hdwallet.derive(i)
  const values = []
  for (var j = 0; j < props.length; j++) {
    const prop = props[j]
    var value = null
    if (prop === 'address') {
      value = '0x' + wallet.getAddress().toString('hex')
    } else if (prop === 'private') {
      value = wallet.getPrivateKey().toString('hex')
    } else if (prop === 'public') {
      value = wallet.getPublicKey().toString('hex')
    } else if (prop === 'hdpath') {
      value = wallet.hdpath()
    }

    if (value) {
      values.push(value)
    }
  }

  result.push([
    i,
    ...values
  ])
}

console.log(table(result, {
  border: getBorderCharacters('void'),
  columnDefault: {
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 1
  },
  drawHorizontalLine: () => {
    return false
  }
}))
