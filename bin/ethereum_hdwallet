#!/usr/bin/env node

const { table } = require('table')
const meow = require('meow')
const HDWallet = require('../')

const cli = meow(`
    Usage
  $ ethereum_hdwallet [options]

    Options
      -i, --index Account Index (e.g. 4)
      -p, --property Property to display (e.g. address, publickey, privatekey, hdpath)
      -r, --range Account Index Range (e.g 1-100)
      -m, --mnemonic Mnemonic

    Examples
      $ ethereum_hdwallet -m "tag volcano eight thank tide danger coast health ab
ove argue embrace heavy" -r 0-10
  `, {
    string: [
      'property',
      'range',
      'mnemonic'
    ],
    number: [
      'index'
    ],
    alias: {
      i: 'index',
      p: 'property',
      r: 'range',
      m: 'mnemonic'
    }
  }
)

const args = process.argv
const { flags, input } = cli
const mnemonic = flags.mnemonic || flags.m || input[0]

if (!mnemonic) {
  throw new Error('mnemonic is required')
}

const hdwallet = new HDWallet(mnemonic)

var start = 0
var end = 10

if (flags.index || flags.i) {
  start = flags.index || flags.i
  end = start + 1
} else if (flags.range || flags.r) {
  const range = (flags.range || flags.r).split('-')
  start = range[0]|0
  end = range[1]|0+1

  if (end < start) {
    end = start + 10
  }
  if (start > end) {
    start = 0
  }
}

var property = flags.property || flags.p || 'address'

var properties = {
  address: 'address',
  private: 'private key',
  public: 'public key',
  hdpath: 'hd path'
}
var prop = ''

if (/address|(public.*address)/.test(property)) {
  prop = 'address'
} else if (/private/.test(property)) {
  prop = 'private'
} else if (/public/.test(property)) {
  prop = 'public'
} else if (/hdpath/.test(property)) {
  prop = 'hdpath'
}

const result = [['account index', properties[prop]]]

for (var i = start; i < end; i++) {
  const wallet = hdwallet.derive(i)
  var value = ''
  if (prop === 'address') {
    value = '0x' + wallet.getAddress().toString('hex')
  } else if (prop === 'private') {
    value = wallet.getPrivateKey().toString('hex')
  } else if (prop === 'public') {
    value = wallet.getPublicKey().toString('hex')
  } else if (prop === 'hdpath') {
    value = wallet.hdpath()
  }
  result.push([
    i,
    value
  ])
}

console.log(table(result))
